/**
 * Loops
 * 
 */

/*
let sum = 0;
let points = [1, 5, -50, 10, 20, 8, 3];
for(let i = 0; i < points.length; i++ ) { //f√∂rsta - s√§tter r√§knaren p√• 0, andra visar hur l√§nge att vi ska r√§kna, sista √§r att det √∂kar med 1, s√• att loopen kommer att fungera
console.log(`At index ${i}, number is: `, points[i]);

    // Ignore negative numbersm and continue the loop at the next iteration
    if (points[i] <= 0){
       console.log("Got some negativity");
        continue;
    }

    //Add number to sum
    sum += points[i];
    console.log("The new sum is:", sum)

    // If sum i 30 or higher we've passed the test
    if (sum >= 30) {
        console.log("You've passed the test!");
        break;
    }
} 


console.log("Loop is done, sum is: ", sum);
*/

//LOKALT OCH GLOBALT
/*

let i; /* detta √§r bara att man beh√∂ver r√§kna hur m√•nga 
g√•nger en loop k√∂r utanf√∂r loopen, i detta fall sista
console log - men det √§r dumt att skriva globala s√•h√§r f√∂r att det kan st√∂ra 
andra loopar
*/
/*
for( // foreloopen √§r ett eget scope
    i = 0; // startv√§rde 
    i < 5; // ska vi forts√§tta loopa?
    i++ // g√∂r detta efter varje iteration
){
    //do stuff
    console.log(i, "üêë")
}

console. log("Sheep", i);
*/

//WHILE LOOP
/* kan vara bra att anv√§nda n√§r man inte har ett 
f√∂rutbest√§mt antal g√•nger man beh√∂ver loopa
*/

/*
let i = 0; //startv√§rde utanf√∂r loop
while (i < 5) { //hur m√•gna g√•nger vi forts√§tter loopa
    //do this
    console.log("in while-loop, i is:", i);

    //bryt n√§r vi kommit till 3
    if(i >= 3){
        break;
    }

    //increase i by 1
    i++;
}

console.log("Finished looping, i is:", i);
*/

/*DO WHILE LOOP √§r som att g√• √∂ver gatan och sen kolla, 
till skillnad fr√•n while-loop, som b√•de kollar och g√•r, 
do while-loop g√•r minst en g√•ng, medan while-loop kollar 
igenom alla kommandon direkt, s√• den g√•r s√• m√•nga g√•nger den ska*/
/*
let i = 0;
do{
    //do stuff
    console.log("In do while-loop, i is:", i);

    //increase i by 1
    i++;
} while (i < 0);
console.log("Finished looping, i is:", 1);

*/

//SWITCH STATEMENTS
/*
let grade = "VG";
if(grade === "VG") {
    console.log("Nice! VG!");
} else if(grade === "G"){
    console.log("Good! G!");
} else if(grade === "IG"){
    console.log("NAJ! IG!");
} else {
    console.log("No cheating!");
}
*/

//Omst√§ndigt, anv√§nd ist√§llet switch
/* Man kan inte anv√§nda m√•svingar i switch, 
d√§rf√∂r m√•ste man l√§gga till break efter varje p√•st√•ende
Smalt anv√§ndningsomr√•de, kan bara kolla p√• en variabel √•t
g√•ngen, till skillnad fr√•n tex en if-sats d√§r man kan kolla
m√•nga olika variabler
Man kan ocks√• bara kolla ett exakt v√§rde, mathematic 
operators funkar inte h√§r tex "mer √§n" eller "lika med"
Man skulle kunna anv√§nda det som en v√§ldigt enkel minir√§knare
*/

/*

let grade = "IG";
switch (grade) {
case "VG":
    console.log("Nice! VG!");
    break;
case "g":
    console.log("Good! G!");
    break;
case "IG":
    console.log("NAJ! IG!");
    break;
default: // default √§r ocks√• viktigt om man skriver in n√•got annat som inte matchar statementsen
    console.log("No cheating!"); 
}

console.log("I'm so over loops!");

*/

//STRICT-MODE

//Man skriver allra √∂verst i en fil
"use strict";

/*en instruktion att vi ska anv√§nda strict mode, 
den f√∂rbjuder vissa saker och √§ndrar vissa tillv√§gag√•ngss√§tt
den ger ocks√• felmeddelande
*/

//msg = "Hello from the otter side"; // att skriva en variabel utan let, utan att ha strict mode kan leda till v√§ldigt sv√•ra buggar
//console.log(msg);
/*

let msg = "Hello from the otter side"; 
console.log(msg);

*/

//NaN = "LOL"; //h√§r kommer den tex ge fel, n√§r man f√∂rs√∂ker √§ndra ett grundl√§ggande begrepp

/* Andra reserverade nyckelord g√•r inte heller att √§ndra
n√§r man anv√§nder strict mode, tex "let" "for" osv */

//SCOPE

// console.log("points before if-statement:", points); //f√•r felmeddelande att jag f√∂rs√∂ker komma √•t v√§rdet av den innan den har blivit skapad

// console.log("points before if-statement:", score); // blir undefined - f√∂r detta finns inte alls

// b√•da de √∂vre √§r s√• allvarliga fel att de bryter kodl√§sningen

/*

let points = 50; //globally scoped variable
console.log("points before if-statement:", points);

if(true){
    let points = 40; //block-scoped - ligger i ett kodblock, man kan titta ut ur l√•dan, men inte in i l√•dan, som en env√§gsspegel

    console.log("points inside first if-statement:", points); //kopplas till det v√§rdet som √§r blocked scope

    if(true) {
        points = 1337;
        console.log("points inside second if-statement:", points);
    }

    console.log("points inside first if-statement, but after second if-statement:", points);
}


console.log("points outside if-statement:", points); // kopplas till det globala

*/

//VAR anv√§nd aldrig!! De blir upplyfta och blir alltid globala
/*
console.log("points before if-statement:", points);

points = 50; 
console.log("points before if-statement:", points);

if(true){
    var points = 40; // var g√∂r att det kvittar om det st√•r i ett kodblock, den √§r global √§nd√•
}

var points; // //f√∂rut fanns det bara "var" - som alltid vad konstant, inte bra! den skapar upp denna, s√• koden l√§ser v√§rdet i b√∂rjan √§ven om det inte ligegr d√§r
console.log("points outside if-statement:", points); // kopplas till det globala

*/

//regular function
/*const greet = function(){
    return 'hello, world';
};*/

//arrow function
// const greet = () => 'hello, world';

// const result = greet();
// console.log(result);

//Regular function
// const bill = function(products, tax) {
//     let total = 0;
//     for(let i = 0; i < products.length; i++){
//         total += products[i] + products[i] + tax;
//     }
//     return total;
// }

// //Arrow function, kan inte korta mer √§n s√• h√§r eftersom det √§r mer logik i kodblocket
// const bill = (products, tax) => {
//     let total = 0;
//     for(let i = 0; i < products.length; i++){
//         total += products[i] + products[i] + tax;
//     }
//     return total;
// };

// console.log(bill([10,15,30], 0.2));
// /* f√∂rst priser p√• produkter, sedan skatt
// loggar v√§rdena direkt i konsolen ist√§llet f√∂r att
// lagra dem i en variabel, samma sak, bara kortare*/

// const myFunc = (callbackFunc) => { //parametern kan man d√∂pa till vad som 
//     // 1. n√§r man √•beropar myFunc m√•ste vi ha en funktion som parameter/argument 
//     //do something
//     let value = 50;
//     callbackFunc(value); // 3. n√§r vi kallar p√• callbackFunc h√§r s√• l√§ser den av v√§rdet som √§r definierat lokalt i funktionen
//     };
    
//     myFunc(function(value){ //2. kallar p√• myFunc h√§r och l√§gger in en funktion som ett argument (en regular function som anv√§nder value som keyword
//     //4. v√§rdet √§r passed back till den h√§r callback functionen och vi kan logga ut v√§rdet 
//     //do something 
//     console.log(value); //5. h√§r loggar vi ut v√§rdet
//     });
    
//     //let people = [‚Äômario‚Äô, ‚Äôluigi‚Äô, ‚Äôrya‚Äô, ‚Äôshaun‚Äô, ‚Äôchun-li‚Äô];

// const ul = document.querySelector('.people'); //g√∂ra en referens till ett element p√• html-sidan - det vi vill ha √§r ‚Äùul‚Äù, . people, kallar p√• classen i html

// const people = ['mario', 'luigi', 'ryu', 'shaun', 'chun-li'];

// //anv√§nda forEach f√∂r att iterera genom listan och sedan en callback function f√∂r att generera en html-template som kommer ge output i ul-taggen i html

// let html = ``; //l√•t html vara en tom str√§ng (backticks)

// people.forEach(person => {
// // create html template f√∂r each person
// html += `<li style= ‚Äùcolor: purple‚Äù>${person}</li>`; //concaternate a bit of a template string, som vi l√§gger p√• html-en
// });

// console.log(html);
// ul.innerHTML = html; //tar v√•rt html-v√§rde och l√§gger i ul-taggen


// const points = 100;			// l√•t po√§ng vara samma som 100
// points = 50; // kan inte √§ndras
// consol.log(points);

// let points = 50;						// variabel definierad 1a g√•ngen
// console.log("points before if-statement:", points); 	// f√•r text + 50

// points = 50; 						// omdefinierad variabel 
// console.log("points before if-statement:", points);	// f√•r text + 50

// if(true){
// var points = 40; 		// var g√∂r att det kvittar om det st√•r i ett kodblock, den 
// }				//√§r global √§nd√•

// TRUTHY/FALSY VALUES + LOGICAL NOT

//FALSY VALUES IN JAVASCRIPT

// let message = " ";

// if(message) {
//     console.log("Message is truthy");
// } else {
//     console.log("Message is falsy");
// }

/* Allt annat utom noll √§r truthy, bara ett f√•tal saker i javascript 
utv√§rderas till falsy, tex 0, "", null, undefined, NaN*/

// let username = "false"; //string - blir false
// if (!username) {
//     username = "anonymous haxx0r";
// }

// console.log(`Welcome ${username}!`)

// let username = false; // blir en boolean som √§r omv√§nd med !, blir anv√§ndarnamnet anonymous haxx0r
// if (!username) { // Logical Not - ! √§r att v√§nda p√• 
//     username = "anonymous haxx0r";
// }

// Annars hade vi beh√∂vt skriva s√•h√§r:

// let username = false; // blir en boolean som √§r omv√§nd med !, blir anv√§ndarnamnet anonymous haxx0r
// if (username) {
//                 // kodgranskaren kommer inte gilla att vi har ett tomt kodblock
// } else { // Logical Not - ! √§r att v√§nda p√• 
//     username = "anonymous haxx0r";
// }

// let message = "abc"; 
// if (message == true) { //kommer inte funka f√∂r att 
//                 // kodgranskaren kommer inte gilla att vi har ett tomt kodblock
// } else { 
//     message = "anonymous haxx0r";
// }

// console.log(`Welcome ${message}!`)

//TERNARY OPERATOR

// let username = "pelle";
// if (username){
//     let msg = "You have a name, wow!"; // kommer inte synas, det √§r en lokal variabel
// } else {
//     let msg = "Y U Has no name!!!";
// }

// G√∂r om:

// let username = "pelle";
// let msg; //m√•ste definiera msg utanf√∂r s√• att den blir global, annars kan du inte kalla p√• den i console-loggen
// if (username){
//     msg = "You have a name, wow!"; 
// } else {
//     msg = "Y U Has no name!!!";
// }

//g√∂r till en ternary operator

// let username = "pelle";
// let msg = (username)
//     ? `You have a name, is is ${username}!` // if - om den √§r sann
//     : "Y U Has no name!!!"; // else - om den √§r falsk

//     console.log(msg)

//FUNCTIONS

/* √Ñr kodblock (baserat p√• n√•gonting, en eller flera variabler) som vi kan anv√§nda
n√§r vi k√∂r en funktion s√• kallas det att vi anropar/invoke den */

//alert("hej!"); //anropar en redan gjord funktion

//Funktions deklaration

/*Den har samma problem som "var" man kan kalla p√• den innan 
den √§r deklarerad vilket bjuder in till d√•lig kodhygien
blir hoisted
*/

// alert("hello form regular scope");
// console.log("hello form regular scope"); //m√•ste upprepas i kod f√∂r att upprepas flera g√•nger

//G√∂ra en funktion ist√§llet
// function sayHello() {
//     alert("hello form a function");
//     console.log("hello form a function");
// }

// sayHello(); // m√•ste kalla p√• den
// sayHello(); // men f√∂r att upprepa koden beh√∂ver man bara kalla p√• dentv√• g√•nger

// function greetUser(username, time = "day"){ /*username √§r ettargument/en parameter, den √§r en lokal variabel, kan ha flera
//                                             "day" √§r ett defaultv√§rde, men kan kan inte blanda default och icks-default, 
//                                             utan de med dafaultv√§rden m√•ste komma efter de som kr√§vs*/ 
//     console.log(`Good ${time}, ${username}`);
// }

// greetUser("FED24M", "morning"); // namnet √§r ett argument/parameter, sparas i parameten username
//                               // f√∂rsta kopplas till f√∂rsta parametern, andra kopplas till andra      
// greetUser("Johan!"); //h√§r f√•r man defaultv√§rdet f√∂r day = Good day, Johan!
// greetUser(); // Good day, undefined!

//FUNCTION EXPRESSION

/* Att f√∂redra! Blir en konstant och g√•r inte att kalla p√• den
innan den √§r deklarerad. Bra kodhygien blir inte hoisted
*/ 

// const greetUser = function (username, time = "day"){ 
//     console.log(`Good ${time}, ${username}`);
// }

// greetUser("FED24M", "morning");

// let myName = "johan";

// const sayHi = function(username) { //en anonym funktion
//     username = username.toUpperCase();
//     console.log(`Hi ${username}`);
// }

// sayHi(myName); //stora bookst√§ver f√∂r att den kallar p√• funktionen

// console.log("username after invoking function:", myName);
// // blir sm√• bokst√§ver f√∂r den har inte n√•gon koppling till funktionen

//RETURNING VALUES

// const calcBoxCircumference = function(width, height) { //f√∂r att kunna s√§kna ut en omkrets beh√∂ver den bredd och h√∂jd
//     const circumference = width * 2 + height * 2;
//     console.log("Circumference is:", circumference);
//     return circumference;
//     }

// const calcBoxCircumference = function(width, height) { //man kan f√∂rkorta det till detta
//     return width * 2 + height * 2;
//     }

// let sum1 = calcBoxCircumference(20, 40); 
// /* han kallar p√• funktionen, men lagrar kallningen i en variabel
// */

// console.log("sum1", sum1); //blir undefined om man inte l√§gger in ett return i funktionen

//ARROW FUNCTION (fat arrow function)

// const calcBoxArea = function(width, height) { // en function expression
//     return width * height;
// }

// const calcBoxArea = (width, height) => { // ta bort function och l√§gg till en pil efter parametrarna
//     return width * height;
// }

// let boxArea1 = calcBoxArea(20, 40);

// console.log("box area1:", boxArea1)

/**
//  * Workshop: Password Checker
//  *
//  * Skriv kod som kollar att l√∂senordet i variabeln password har
//  * - minst 6 tecken varav minst tv√• specialtecken enligt nedan
//  * - minst 8 tecken varav minst ett specialtecken enligt nedan
//  * - eller har minst 12 tecken och minst 1 bindestreck
//  * - eller har minst 16 tecken
//  *
//  * B√∂rja med att l√∂sa den i omv√§nd ordning, dvs f√• f√∂rst kollen att l√∂senordet
//  * har minst 16 tecken att fungera.
//  *
//  * Ut√∂ka d√§refter koden till att kolla om l√∂senordet har minst 12 tecken OCH
//  * minst 1 bindestreck.
//  *
//  * Osv.
//  *
//  * Googla f√∂r att hitta l√§mpliga metoder f√∂r att l√∂sa uppgiften.
//  *
//  * Du ska allts√• precis som i f√∂rsta dagens workshop ta bort kommentarerna
//  * en efter en och testa att alla olika kombinationer av l√∂senord fungerar
//  * och ger r√§tt resultat.
//  */

// let password;
// // password = "password"; // inte giltigt
// // password = "pa$sword"; // giltigt
// // password = "p@ssw%rd"; // giltigt
// password = "p$$wrd"; // giltigt
// // password = "secretpassword"; // inte giltigt
// // password = "secret-password"; // giltigt
// // password = "such-password-much-secure-very-long"; // giltigt

// const specialChars = [
// 	"@", "$", "%", "*", "^", "<", ">", "?", "!", "(", ")", "[", "]", "{", "}", "'"
// ];

// console.log(`üïµüèª Checking password '${password}'`);

// //Vi g√∂r en loop - f√∂rst g√∂r vi en global variabel.

// let specialCharCount = 0; // vi utg√•r fr√•n att det inte finns tills vi hittar den


// //f√∂r varje tecken i password, kolla om det √§r ett specialtecken, man r√§knar hur m√•nga true det blir?
// for (let i = 0; i < password.length; ++i){
// 	const char = password[i];
// 	console.log(`At char ${i}, is char "${char}" a special char?`, specialChars.includes(char)); //denna √§r f√∂r att se var den hittar specialtecken

// 	if(specialChars.includes(char)) {
// 		specialCharCount++; //H√§r har vi hittat det, ++ √§r 1
// 		if(specialCharCount === 2) { // d√§rf√∂r m√•ste man l√§gga till en ett nestlat if-statement som s√§ger att om den √§r 2 s√• slutar vi
// 			break; // l√§gger man bara break h√§r s√• stannar den n√§r den har hittat en, men den ska hitta tv√• minst
// 		} 
// 	}
// }
// /*
// for (let i = 0; i < specialChars.length; ++i){
// 	const specialChar = specialChars[i];
// 	console.log(`At index ${i} does password contain "${specialChars}"?`, password.includes(specialChar));

// 	if(password.includes(specialChar)) {
// 		specialCharCount++; //H√§r har vi hittat det, ++ √§r 1
// 	}
// }*/



// // Skriv din kod h√§r
// /*
// if(password.length >= 16 ){ //Minst 16 tecken
// 	console.log ('This password is superduper long!')
// } else if(password.length >= 12 && password.includes("-")){ //Minst 12 tecken och minst 1 bindestreck - kolla p√• denna
// 	console.log ('This password is strong-long and includes "-"!')
// } else if(password.length >= 8 && specialChars.some(char => password.includes(char))){ //Minst 8 tecken varav minst ett specialtecken enligt nedan
// 	console.log ('This password is at least 8 characters long and includes at least one special character!') 
// } else if (password.length >= 6 && specialChars.some(char => password.includes(char >= 2))){ //Minst 6 tecken varav minst tv√• specialtecken enligt nedan
// 	console.log ('This password is ok strong and includes two or more special character!') 
// 	} else {
// 		console.log("Try another password üòà");
// 	}
// */

// /*Alternativt s√§tt att l√∂sa det √§r att v√§nda p√• allt 
// f√∂r att det kan vara bra att ha de med specialtecknen 
// f√∂rst som starkast*/

// /*Anv√§nder man indexOf p√• andra ist√§llet f√∂r 
// password.includes("-") och - ligger f√∂rst s√• blir det 0
// och det √§r false i javascript och ger -1, d√• hade man f√•tt
// l√§gga till >= 0 eller !== -1 */

// /* F√∂r att kolla specialtecknen s√• kan man ocks√• loopa √∂ver listan (array) */

// /*

// if(password.length >= 16 ){ //Minst 16 tecken
// 	console.log ('This password is superduper long!')
// } else if(password.length >= 12 && password.includes("-")){ //Minst 12 tecken och minst 1 bindestreck - kolla p√• denna
// 	console.log ('This password is strong-long and includes "-"!')
// } else if(password.length >= 8 && specialCharCount <= 1){ //Minst 8 tecken varav minst ett specialtecken enligt nedan
// 	console.log ('This password is at least 8 characters long and includes at least one special character!') 
// } else if (password.length >= 6 && specialCharCount >= 2){ //Minst 6 tecken varav minst tv√• specialtecken enligt nedan
// 	console.log ('This password is ok strong and includes two or more special character!') 
// 	} else {
// 		console.log("Try another password üòà");
// 	}

// */

// // V√§nder p√• det

// // if (password.length >= 6 && specialCharCount >= 2){ //Minst 6 tecken varav minst tv√• specialtecken enligt nedan
// // 	console.log ('This password is ok strong and includes two or more special character!') 

// // } else if(password.length >= 8 && specialCharCount <= 1){ //Minst 8 tecken varav minst ett specialtecken enligt nedan
// // 	console.log ('This password is at least 8 characters long and includes at least one special character!') 

// // } else if(password.length >= 12 && password.includes("-")){ //Minst 12 tecken och minst 1 bindestreck - kolla p√• denna
// // 	console.log ('This password is strong-long and includes "-"!')

// // } else if(password.length >= 16 ){ //Minst 16 tecken
// // 	console.log ('This password is superduper long!')

// // }else {
// // 		console.log("Try another password üòà");
// // 	}

/**
 * Workshop: Password Checker with functions
 *
 * Skriv om l√∂senordskollen till att testa samtliga l√∂senord i listan
 * `passwords`.
 *
 * Ni ska √§ven ha en funktion som r√§knar antalet specialtecken och returnerar
 * hur m√•nga som hittades.
 *
 * Varje l√∂senord ska console.log'as tillsammans med dess resultat.
 *
 * STEG 1
 * Testa samtliga l√∂senord i listan. Koden ska vara oberoende av hur m√•nga
 * l√∂senord som finns i listan.
 *
 * STEG 2
 * Skriv en funktion som r√§knar antalet unika specialtecken och returnerar
 * hur m√•nga specialtecken som hittades. Anropa den h√§r funktionen f√∂r
 * varje l√∂senord.
 *
 * KRAVSPEC FR√ÖN TIDIGARE:
 * - minst 6 tecken varav minst tv√• specialtecken enligt nedan
 * - minst 8 tecken varav minst ett specialtecken enligt nedan
 * - eller har minst 12 tecken och minst 1 bindestreck
 * - eller har minst 16 tecken
 *
 */

//HANS L√ñSNING

// const passwords = [
// 	"password",								// üö®
// 	"p@*swd",								// üîê
// 	"pa$sword",								// üîê
// 	"p@ssw%rd",								// üîê
// 	"pa$$wd",								// üö®
// 	"secretpassword",						// üö®
// 	"secret-password",						// üîê
// 	"such-password-much-secure-very-long",	// üîê
// 	"$$$",									// üö®
// ];

// const specialChars = [
// 	"@", "$", "%", "*", "^", "<", ">", "?", "!", "(", ")", "[", "]", "{", "}", "'"
// ];

// //counts the number of special chars and returns it
// /* han vill s√§tta upp en r√§knare och loopa √∂ver den*/
// const countSpecialChars = function(pwd){ //pwd √§r en vanlig f√∂rkortning f√∂r password, h√§r b√∂rjar en funktiob 
    
//     // R√§knare som indikerar om ett specialtecken som hittats
//     let specialCharCount = 0;

//     // F√∂r varje tecken i password, kolla det √§r ett specialtecken
//     for (let i = 0; i < pwd.length; i++) {
//         const char = pwd[i];
//         //console.log(`At char ${i}, is char "${char}" a special char?`, specialChars.includes(char));

//         if (specialChars.includes(char)) {
//             specialCharCount++;
//             if (specialCharCount === 2) {  // If we found two special chars, break free from the loop
//                 break;  // i want to
//             }
//         }
//     }
//     return specialCharCount;
// }

// for (let i = 0; i < passwords.length; i++) {
//     //console.log("i:", i);//visar hur m√•nga det blir
    
//     //console.log(`i: ${i}, password: ${passwords[i]}`); //n√§r i √§r (nummer p√• saken i listan) s√• √§r l√∂senordet: (namn)

//     //f√• l√∂senordet fr√•n index [i] fr√•n listan "passwords"
//     //och spara det till den lokala variabeln password
//     const password = passwords[i];

//     console.log(`üïµüèª Checking password '${password}'`);

//     //Call function to count the number of special chars
//     let specialCharCount = countSpecialChars(password);

    
//     console.log("Loop is done, special chars found:", specialCharCount);

//     // Har l√∂senordet minst 6 tecken OCH inneh√•ller minst tv√• specialtecken?
//     if (password.length >= 6 && specialCharCount >= 2) {
//         // Ja!
//         console.log("- ‚úÖ Great! Such password, much secure, *VERY* hard to crack!");

//     // Har l√∂senordet minst 8 tecken OCH inneh√•ller minst ett specialtecken?
//     } else if (password.length >= 8 && specialCharCount >= 1) {
//         // Ja!
//         console.log("- ‚úÖ Great! Such password, much secure, very hard to crack!");

//     // Har l√∂senordet minst 12 tecken OCH inneh√•ller minst ett bindestreck?
//     } else if (password.length >= 12 && password.includes("-")) {
//         // Ja!
//         console.log("- ‚úÖ Great! That's a pretty good password!");

//     // Har l√∂senordet minst 16 tecken?
//     } else if (password.length >= 16) {
//         // Ja!
//         console.log("- ‚úÖ Great! That's a long password!");

//     } else {
//         // Nej!
//         console.log("- üö® Insecure password, my grandma can crack it!");
//     }

// }

//MITT D√ÖLIGA F√ñRS√ñK

// console.log(`checking password '${password}'`)

// let specialCharCount = 0;

// for (let i = 0; i < passwords.length; i++) {
//     const currentPassword = password[i];

//     for(let j = 0; j < currentPassword.length; j++) {
//     const char = currentPassword[j];
//     console.log(`At char ${j}, is char ${char} a special char?`, specialChars.includes(char));

//         if (specialChars.includes(char)){
//             specialCharCount++;
//             if (specialCharCount === 2){
//                 break;
//             }
//         }
//         if (specialCharCount === 2){
//             break;
//         }
//     }
// }

// console.log("Loop is done, special char is found:", specialCharCount);

// const specialCharCount2 = function(specialCharCount) {
//     return specialCharCount
// };

// const sum1 = specialCharCount2(specialCharCount);


// if(passwords.length >= 6 && specialCharCount >= 2) {
//     console.log("a password with 6 characters and two special ones");
//     specialCharCount2(specialCharCount);

// }else if(passwords.length >= 8 && specialCharCount >= 1) {
//     console.log("a password with 8 characters and a special one");
//     specialCharCount2(specialCharCount);

// }else if(passwords.length >= 12 && passwords.includes("-")) {
//     console.log("a password with 12 characters and one -");
//     specialCharCount2(specialCharCount);

// }else if(passwords.length >= 16) {
//     console.log(`${passwords} is a log password`);
//     specialCharCount2(specialCharCount);
    
// } else {
//     console.log("Try another password")
//     specialCharCount2(specialCharCount);
// }
	

// console.log("this is the sum om special characters: ", sum1);

//H√ÑR SLUTAR MITT D√ÖLIGA F√ñRS√ñK

//MATH INBYGGDA FUNKTIONER

//Om jag vill avrunda ett tal

// //flyt-tal
// Math.round(13.37); // round avrundar ett flytande tal ner√•t, √∂ver ".5" s√• blir det alltid upp√•t
// Math.floor(13.5);// floor avrundar alltid ett flytande tal ned√•t
// Math.ceil(13.3);// ceil avrundar alltid ett flytande tal upp√•t
// //Math.random();// random ger olika tal mellan olika variabler, () tom ger tal mellan 0,0000-9,9999
// //Tar man Math.random() x 10; f√•r man tal mellan 0,0000 - 9,9999

// // ger random numbers mellan 0,0001 och 9,999
// const floatBetweenZeroAndAlmostTen = Math.random() * 10;
// const integerBetweenZeroAndAlmostTen = Math.round(floatBetweenZeroAndAlmostTen);

//Only get number between 1-10
//const integerBetweenOneAndTen = Math.ceil(floatBetweenZeroAndAlmostTen);

//UPPGIFT
// TODO:
//  * getRandomNumber ska kunna generera ett tal mellan 1 - X,
//  * till exempel ska getRandomNumber(20) ge ett tal mellan 1-20,
//  * getRandomNumber(50) ska ge ett tal mellan 1-50 och
//  * getRandomNumber() ska ge ett tal mellan 1-10


// Generate a randome number between 1-10 
// const getRandomNumber = () => { // √Ñndra h√§r f√∂r att fixa uppgiften
//     return Math.floor (Math.random() * 10) + 1; // √Ñndra h√§r f√∂r att fixa uppgiften
// }

// let numbers = [];
// for (let i = 0; i < 50; i++) {
//     numbers.push(getRandomNumber());
// }

// console.log("Numbers:", numbers.join(", "));

// Generate a randome number between 1-20 
// Detta kan vi kopiera till v√•r uppgift p√• m√•ndag
// const getRandomNumber = (max = 10) => { // ger den en parameter vilket f√∂r att man kan ge den ett v√§rde n√§r amn kallar p√• den
//     return Math.floor(Math.random() * max) + 1; // Man kan bara returnera en sak, ist√§llet f√∂r att skriva * 20 s√• kan man g√∂ra en parameter
// }

// let numbers = [];
// for (let i = 0; i < 50; i++) {
//     numbers.push(getRandomNumber(30)); //anropar funktionen, och ger den 20 som indata
// }

// console.log("Numbers:", numbers.join(", "));

// // Generate a randome number between 1-50 
// const getRandomNumber = () => { // √Ñndra h√§r f√∂r att fixa uppgiften
//     return Math.floor (Math.random() * 50) + 1; // √Ñndra h√§r f√∂r att fixa uppgiften
// }

// let numbers = [];
// for (let i = 0; i < 50; i++) {
//     numbers.push(getRandomNumber());
// }

// console.log("Numbers:", numbers.join(", "));

//Scare the nice user, g√∂r en prompt och sedan en alert
let username = prompt("Please enter your name","Default i rutan");

if (!username) {      
username = "boring person";
}

alert(`Boo ${username}`);